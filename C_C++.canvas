{
	"nodes":[
		{"type":"text","text":"# *C/C++*","id":"b5f6ed9bb6b1622e","x":-120,"y":-840,"width":195,"height":120},
		{"type":"text","text":"### How C/C++ file is compiled\n1. **Pre-processing**\n\t- expanding macros\n\t- including header files\n\t- removing comments\n\t- output is called \n2. **Compilation**\n\t- translate pre-processed code into assembly code\n\t- stored in an object file\n3. **Assembly**\n\t- translating assembly code into machine code\n\t- done by assembler\n4. **Linking**\n\t- if program has multiple source files, there will be multiple object files generated for each source file\n\t- these must be combined into a single executable program\n\t- done by linker","id":"380e4489f4a9364a","x":-1289,"y":-993,"width":644,"height":660},
		{"type":"text","text":"**linkage**\n- refers to the visibility of a variable or a fn. outside the translation unit. \n- type\n\t- *none* \n\t\t- can be accessed only within the scope where they are defined\n\t- *internal*: \n\t\t- can only be accessed only within the translation unit where they are defined\n\t\t- `static int variable` \n\t\t- `variable` cannot be accessed outside the translation unit\n\t- *external*\n\t\t- can be accessed from outside the translation unit\n\t\t- default linkage type\n\n```C\n// file1.c\nint gobal_variable;\nglobal_variable = 42;\n\n// file2.c\nextern int global_variable;\n```\n\nhere, the variable `global_variable` is located in file1.c with external linkage (by default)\n\nin file2.c, we access `global_variable` which was externally linked using the keyword `extern`, signifying that the variable is located in a different translation unit.","id":"21b8972d89b7bb13","x":-501,"y":629,"width":708,"height":911},
		{"type":"text","text":"**storage duration**\n- how long a variable or object exists in memory\n- types\n\t- *static*\n\t\t- `auto`\n\t\t\t- allocated on stack\n\t\t\t- destroyed when the block is exited\n\t\t\t- default for all local variables\n\t\t- `static` \n\t\t\t- allocated on static memory\n\t\t\t- destroyed when the block is exited\n\t\t\t- variables retain their values between function calls\n\t\t- `register`\n\t\t\t- have automatic storage duration\n\t\t\t- stored in CPU register for faster access\n\t- *dynamic* \n\t\t- allocated on heap\n\t\t- C: `malloc` and `calloc`\n\t\t- C++: `new` and `delete`","id":"d51183fc6d9c6814","x":-1573,"y":629,"width":568,"height":738},
		{"type":"text","text":"**scope**\n- where a variable/functions can be accessed in the program\n- type\n\t- *file scope* \n\t\t- only within the translation unit where they are defined\n\t\t- `auto`\n\t\t\t- optional as it is default\n\t\t- `static`\n\t\t- `register`\n\t- *global scope* \n\t\t- accessible throughout the program\n\t\t- can be done by declaring it outside of any function or block\n\t\t- `extern` can also be used","id":"f5df7c8e088c0fc6","x":-967,"y":629,"width":429,"height":650},
		{"type":"text","text":"**Translation Unit**: a source file with any header it includes","id":"7f4654ddacc4af14","x":-894,"y":-160,"width":374,"height":100},
		{"id":"13f748bebf478e61","x":396,"y":920,"width":598,"height":495,"type":"text","text":">[!NOTE]\n>- an *externally linked variable* can be accessed in the program through multiple translation units several times\n>- but, it is important to ensure that the variable is *defined once* in the entire program to avoid multiple definitions\n>- this can be done by \n>\t- declaring the variable in a *header file* with keyword `extern`\n>\t- *include* the header file in all the translation units that need to access the variable"},
		{"id":"b493f300db578398","x":-1520,"y":1540,"width":515,"height":340,"type":"text","text":"```c\nint n = 10;\n\n// malloc - garbage initialization\nint x = (int *) malloc(1*sizeof(int));\nint *arr = (int *) malloc(n*sizeof(int));\n\n// calloc - zero initialization\nint y = (int *) calloc(1,sizeof(int));\nint *new = (int *) calloc(n, sizeof(int));\n\n```"},
		{"type":"text","text":"### qualifiers\n*const* and *volatile*","id":"cb96de5282ad1806","x":547,"y":656,"width":208,"height":140},
		{"type":"text","text":"### Datatypes in C\n- there are 5 basic *pre-defined* data types\n\t- **char**\n\t- **int**\n\t- **float**\n\t- **double**\n\t- **void**\n","id":"f6c02d9b71517e27","x":651,"y":228,"width":320,"height":350},
		{"type":"file","file":"screenshots/Pasted image 20230225204209.png","id":"3b375d552d99ea23","x":1140,"y":228,"width":722,"height":646},
		{"id":"80af04adc5f0d334","x":842,"y":-238,"width":433,"height":298,"type":"text","text":"**Default arguments**\n- the ending formal arguments can have default values if no argument is passed for them.\n- only available in C++\n- C can have variable length argument list"},
		{"type":"text","text":"### Variables\n1. **Local**\n\t- declared inside a function\n\t- automatic variables\n\t- only exist inside the block of the function\n\t- created upon entry\n\t- destroyed upon exit\n2. **formal parameters**\n\t- declared in the function header\n\t- act as local variables\n3. **global**\n\t- known throughout the program\n\t- storage for global variables in done in a  fixed location in memory (set aside by the compiler)","id":"26139e551408c6f6","x":-61,"y":-386,"width":457,"height":594},
		{"type":"text","text":"### storage class specifiers in C\n- extern\n- static\n- register\n- auto","id":"12c57d66b78df3c4","x":-738,"y":99,"width":400,"height":258},
		{"id":"62b26d28164370e3","x":1274,"y":-1113,"width":365,"height":362,"type":"text","text":" - **call by value**\n\t - send duplicate of the actual argument to formal argument\n\t - changes not reflected\n - **call by reference**\n\t - send address of the actual parameters to formal parameters\n\t - using pointers"},
		{"id":"fa4b45776a6c8bbe","x":1394,"y":-521,"width":485,"height":250,"type":"text","text":"functions can be **overloaded in C++**\n- using different function signatures for each header\n- *function signature*: return type, number, order and types of arguments."},
		{"id":"4b5142c5941f5845","x":545,"y":-840,"width":593,"height":444,"type":"text","text":"### Functions\n```C\n<return-type> function_name(parameter_list)\n{\n\t// body of function\n}\n```\n \n\n- **command line arguments**\n\t- `int main(int argc, char *argv[])`\n\t- `argc`: number of arguments\n\t- `argv`: list of character arguments"},
		{"id":"8c70627850c7be13","x":-393,"y":-1900,"width":633,"height":840,"type":"text","text":"# topics to cover\n- [ ] STL\n\t- [ ] vectors\n\t- [ ] lists\n\t- [ ] map\n\t- [ ] algos\n- [ ] C\n\t- [ ] file I/O\n\t- [ ] pre-processors\n- [ ] C++\n\t- [ ] OOP features\n\t\t- [ ] classes\n\t\t- [ ] constructors and destructors\n\t\t- [ ] inheritance\n\t\t- [ ] operator overloading\n\t\t- [ ] ambiguity\n\t\t- [ ] virtual function\n\t\t- [ ] this keyword\n\t- [ ] dynamic allocation\n\t- [ ] templates\n\t- [ ] namespaces\n"}
	],
	"edges":[
		{"id":"72ec672554ae0990","fromNode":"f6c02d9b71517e27","fromSide":"right","toNode":"3b375d552d99ea23","toSide":"left"},
		{"id":"2f385a42709d5875","fromNode":"b5f6ed9bb6b1622e","fromSide":"bottom","toNode":"26139e551408c6f6","toSide":"top"},
		{"id":"4018988a71badd0f","fromNode":"26139e551408c6f6","fromSide":"bottom","toNode":"cb96de5282ad1806","toSide":"left","label":"access type"},
		{"id":"e572df2ad4ef6a46","fromNode":"26139e551408c6f6","fromSide":"left","toNode":"12c57d66b78df3c4","toSide":"right","label":"how variable\nis stored"},
		{"id":"48431c1f53d28449","fromNode":"26139e551408c6f6","fromSide":"right","toNode":"f6c02d9b71517e27","toSide":"left","label":"type"},
		{"id":"1f5e12134c3bcfef","fromNode":"b5f6ed9bb6b1622e","fromSide":"left","toNode":"380e4489f4a9364a","toSide":"right"},
		{"id":"b66d3696e99ce352","fromNode":"380e4489f4a9364a","fromSide":"bottom","toNode":"7f4654ddacc4af14","toSide":"top"},
		{"id":"3a1185de17483a99","fromNode":"12c57d66b78df3c4","fromSide":"bottom","toNode":"d51183fc6d9c6814","toSide":"top"},
		{"id":"afcca7178c6fe107","fromNode":"12c57d66b78df3c4","fromSide":"bottom","toNode":"f5df7c8e088c0fc6","toSide":"top"},
		{"id":"7b4e2bf0b6aa30e1","fromNode":"12c57d66b78df3c4","fromSide":"bottom","toNode":"21b8972d89b7bb13","toSide":"top"},
		{"id":"b7a3e330018695bb","fromNode":"21b8972d89b7bb13","fromSide":"right","toNode":"13f748bebf478e61","toSide":"left"},
		{"id":"74e9aa0e05dc3837","fromNode":"d51183fc6d9c6814","fromSide":"bottom","toNode":"b493f300db578398","toSide":"top"},
		{"id":"b92796e6e81d4e62","fromNode":"4b5142c5941f5845","fromSide":"right","toNode":"62b26d28164370e3","toSide":"bottom"},
		{"id":"56ee35c6b6b6790f","fromNode":"b5f6ed9bb6b1622e","fromSide":"right","toNode":"4b5142c5941f5845","toSide":"left"},
		{"id":"60f8959167306d5f","fromNode":"4b5142c5941f5845","fromSide":"right","toNode":"fa4b45776a6c8bbe","toSide":"left"},
		{"id":"d361d40da5b09e1f","fromNode":"4b5142c5941f5845","fromSide":"bottom","toNode":"80af04adc5f0d334","toSide":"top"}
	]
}